# -*- coding: utf-8 -*-
inp = input('Введите адрес сети с маской вида 10.0.0.0/24: ')
ip = inp.split('/')
ip_addr = ip[0]
ip_mask = ip[1]
ip_addr = ip_addr.split('.')
ok1, ok2, ok3, ok4 = ip_addr
ip_addr0 = ('{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(ok1), int(ok2), int(ok3), int(ok4)))
ip_addr0 = (ip_addr0[0:int(ip_mask)] + "0" * (32 - int(ip_mask)))
ip_mask1 = ip_addr0[0:8]
ip_mask2 = ip_addr0[8:16]
ip_mask3 = ip_addr0[16:24]
ip_mask4 = ip_addr0[24:32]
ip_mask1_2 = int(ip_mask1, 2)
ip_mask2_2 = int(ip_mask2, 2)
ip_mask3_2 = int(ip_mask3, 2)
ip_mask4_2 = int(ip_mask4, 2)
mask = ("1" * int(ip_mask) + "0" * (32 - int(ip_mask)))
mask1 = mask[0:8]
mask2 = mask[8:16]
mask3 = mask[16:24]
mask4 = mask[24:32]
mask1_2 = int(mask1, 2)
mask2_2 = int(mask2, 2)
mask3_2 = int(mask3, 2)
mask4_2 = int(mask4, 2)
print("Network:")
print('{0:<8} {1:<8} {2:<8} {3:<8}'.format(int(ip_mask1_2), int(ip_mask2_2), int(ip_mask3_2), int(ip_mask4_2)))
print(ip_mask1, ip_mask2, ip_mask3, ip_mask4)
print()
print("Mask:")
mask_0 = '/'+ ip_mask
print(mask_0)
print('{0:<8} {1:<8} {2:<8} {3:<8}'.format(int(mask1_2), int(mask2_2), int(mask3_2), int(mask4_2)))
print(mask1, mask2, mask3, mask4)

"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
